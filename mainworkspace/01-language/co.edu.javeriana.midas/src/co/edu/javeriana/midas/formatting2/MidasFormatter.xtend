/*
 * generated by Xtext 2.9.1
 */
package co.edu.javeriana.midas.formatting2

import co.edu.javeriana.midas.midas.Component
import co.edu.javeriana.midas.midas.Import
import co.edu.javeriana.midas.midas.Variable

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

import co.edu.javeriana.midas.midas.ComputationNode
import co.edu.javeriana.midas.midas.ComputationNodeDefinition
import co.edu.javeriana.midas.midas.ContextEntity
import co.edu.javeriana.midas.midas.Requirement
import co.edu.javeriana.midas.midas.RequirementSpecification
import co.edu.javeriana.midas.midas.BehaviorModel

class MidasFormatter extends AbstractFormatter2 {
	
	def dispatch void format(co.edu.javeriana.midas.midas.Class _class, extension IFormattableDocument doc){
		_class.regionFor.keyword("{").append[newLine]
		_class.regionFor.keyword("}").append[newLines = 2]
		_class.interior[indent]
		for(t : _class.attributes){
			t.format.append[newLine]
		}
	}
	
	def dispatch void format(BehaviorModel _behaviormodel, extension IFormattableDocument doc){
		_behaviormodel.regionFor.keyword("{").append[newLine]
		_behaviormodel.regionFor.keyword("}").append[newLines = 2]
		_behaviormodel.interior[indent]
		for(t : _behaviormodel.subComponents){
			t.format.append[newLine]
		}
	}
	
	def dispatch void format(ComputationNodeDefinition _computationNodeDefinition, extension IFormattableDocument doc){
		_computationNodeDefinition.regionFor.keyword("{").append[newLine]
		_computationNodeDefinition.regionFor.keyword("}").append[newLines = 2]
		_computationNodeDefinition.interior[indent]
		_computationNodeDefinition.regionFor.keyword(";").append[newLine]
		for(t : _computationNodeDefinition.subComponents){
			t.format.append[newLine]
			t.interior[indent]
			//System.out.println("Dentro de cnd")
		}
	}
	
	def dispatch void format(ComputationNode _computationNode, extension IFormattableDocument doc){
		_computationNode.interior[indent]
		_computationNode.regionFor.keyword(";").append[newLine]
		_computationNode.regionFor.keyword("<-").surround[noSpace]
		_computationNode.regionFor.keyword("(").surround[noSpace]
		_computationNode.regionFor.keyword(")").surround[noSpace]
		/*for(t : _computationNode.subComponents){
			t.regionFor.keyword("<-").surround[noSpace]
			t.format.append[newLine]
		}*/
	}
	def dispatch void format(RequirementSpecification _requirementSpecification, extension IFormattableDocument doc){
		_requirementSpecification.regionFor.keyword("{").append[newLine]
		_requirementSpecification.regionFor.keyword("}").append[newLines = 2]
		_requirementSpecification.interior[indent]	
	}
	
	def dispatch void format(Requirement _requirement, extension IFormattableDocument doc){
		_requirement.regionFor.keyword("{").append[newLine]
		_requirement.regionFor.keyword("}").append[newLines = 2]
		_requirement.interior[indent]
	}

	def dispatch void format(co.edu.javeriana.midas.midas.Package _package, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		for (Import imports : _package.getImports()) {
			imports.format;
		}
		for (Component subComponents : _package.getSubComponents()) {
			subComponents.regionFor.keyword(";").append[newLine]
			subComponents.regionFor.keyword("}").append[newLines = 2]
			
			subComponents.format;
		}
	}

	def dispatch void format(Variable variable, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		variable.getType.format;
	}
	
	// TODO: implement for Assignment, FunctionDefinition, FunctionCall, Enum, UseCase, UserFlow, SystemFlow, BinaryOperator, UnaryOperator, Class, Format, User, Context, Attribute, ParameterizedType
}