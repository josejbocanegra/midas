/*
 * generated by Xtext 2.9.1
 */
package co.edu.javeriana.midas.formatting2

import co.edu.javeriana.midas.midas.Component
import co.edu.javeriana.midas.midas.Import
import co.edu.javeriana.midas.midas.Variable
import co.edu.javeriana.midas.services.MidasGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.build.IncrementalBuilder.Result
import co.edu.javeriana.midas.midas.FunctionDefinition

class MidasFormatter extends AbstractFormatter2 {
	
	@Inject extension MidasGrammarAccess 
	
	def dispatch void format(co.edu.javeriana.midas.midas.Class _class, extension IFormattableDocument doc){
		_class.regionFor.keyword("{").append[newLine]
		_class.regionFor.keyword("}").append[newLines = 2]
		
		_class.interior[indent]
		
		for(t : _class.attributes){
			t.format.append[newLine]
		}
	}
	
	def dispatch void format(FunctionDefinition _function, extension IFormattableDocument doc){
		_function.interior[indent]
		_function.regionFor.keyword(";").append[newLine]
		_function.regionFor.keyword("<-").surround[noSpace]
		for(t : _function.subComponents){
			t.regionFor.keyword("<-").surround[noSpace]
			t.format.append[newLine]
		}
	}

	def dispatch void format(co.edu.javeriana.midas.midas.Package _package, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		for (Import imports : _package.getImports()) {
			imports.format;
		}
		for (Component subComponents : _package.getSubComponents()) {
			subComponents.regionFor.keyword(";").append[newLine]
			subComponents.regionFor.keyword("}").append[newLines = 2]
			
			subComponents.format;
		}
	}

	def dispatch void format(Variable variable, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		variable.getType.format;
	}
	
	// TODO: implement for Assignment, FunctionDefinition, FunctionCall, Enum, UseCase, UserFlow, SystemFlow, BinaryOperator, UnaryOperator, Class, Format, User, Context, Attribute, ParameterizedType
}